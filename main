import discord
import random
from discord import app_commands
from discord.ext import commands

intents = discord.Intents.default()
bot = commands.Bot(command_prefix='!', intents=intents)

queue = []
initial_queue = []
teams = []
teams_data = [
    ("JTEKT Stings", "<:JTEKT:1266599811327594568>"),
    ("Panasonic Panthers", "<:Panthers:1266599797994029127>"),
    ("JT Thunders Hiroshima", "<:Thunders:1266599787294232669>"),
    ("Toray Arrows", "<:Arrows:1266599777265778833>"),
    ("Wolfdogs Nagoya", "<:WolfDogs:1266599765571797032>"),
    ("Tokyo Great Bears", "<:Bears:1266599753932865619>"),
    ("Oita Miyoshi Weisse Adler", "<:Oita:1266599711503155301>"),
    ("VC Nagano Tridents", "<:Tridents:1266599699528552589>"),
    ("Suntory Sunbirds", "<:Sunbirds:1266599688887468062>"),
    ("Sakai Blazers", "<:Blazers:1266599648643256320>"),
    ("Vero Volley Monza", "<:VeroVolley:1266599633912860702>")
        ]

class QueueView(discord.ui.View):
    def __init__(self):
        super().__init__()
        self.add_item(discord.ui.Button(label="Join Queue", style=discord.ButtonStyle.primary, custom_id="join_queue"))
        self.add_item(discord.ui.Button(label="Leave Queue", style=discord.ButtonStyle.danger, custom_id="leave_queue"))
        self.add_item(discord.ui.Button(label="Add Bots", style=discord.ButtonStyle.secondary, custom_id="add_bots"))
        self.add_item(discord.ui.Button(label="Start Queue", style=discord.ButtonStyle.success, custom_id="start_queue"))

    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        return interaction.guild is not None

class TeamSelectView(discord.ui.View):
    def __init__(self, bot, mode='Full Court', num_teams=None):
        super().__init__()
        self.bot = bot
        self.mode = mode
        self.num_teams = num_teams
        if num_teams is None:
            for i in range(1, 7):
                self.add_item(discord.ui.Button(label=f"{i} Teams", style=discord.ButtonStyle.secondary, custom_id=f"teams_{i}"))
        else:
            self.add_item(discord.ui.Button(label="Reshuffle Teams", style=discord.ButtonStyle.primary, custom_id=f"reshuffle_{num_teams}"))
            self.add_item(discord.ui.Button(label="Matchmake", style=discord.ButtonStyle.success, custom_id="matchmake"))

        self.add_item(discord.ui.Button(label=f"Mode: {mode}", style=discord.ButtonStyle.primary, custom_id="toggle_mode"))

    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        return interaction.guild is not None

class MyBot(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.queue_message = None
        self.mode = 'Full Court'
        self.team_names = []

    @app_commands.command(name="queue", description="Manage the queue")
    async def queue(self, interaction: discord.Interaction):
        embed = discord.Embed(title="Queue", description="Current players in queue:\n" + "\n".join(queue) if queue else "No players in queue.")
        await interaction.response.send_message(embed=embed, view=QueueView())
        self.queue_message = await interaction.original_response()

    @app_commands.command(name="coinflip", description="Flip a coin")
    async def coinflip(self, interaction: discord.Interaction):
        result = random.choice(["Heads", "Tails"])
        await interaction.response.send_message(f"The coin landed on: {result}")

    async def update_queue_message(self):
        if self.queue_message:
            embed = discord.Embed(title="Queue", description="Current players in queue:\n" + "\n".join(queue) if queue else "No players in queue.")
            await self.queue_message.edit(embed=embed, view=QueueView())

    async def start_queue(self, interaction: discord.Interaction):
        if not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message("You do not have permission to start the queue.", ephemeral=True)
            return

        if not queue:
            await interaction.response.send_message("The queue is empty.")
            return

        global initial_queue
        initial_queue = queue.copy()

        await interaction.response.send_message("Select the number of teams:", view=TeamSelectView(self.bot, mode=self.mode), ephemeral=True)

    async def handle_team_selection(self, interaction: discord.Interaction, num_teams: int):
        global teams
        max_team_size = 6 if self.mode == 'Full Court' else 4
        teams = [initial_queue[i::num_teams] for i in range(num_teams)]
        for team in teams:
            if len(team) > max_team_size:
                await interaction.response.send_message(f"Cannot form teams. Too many players for {self.mode}.", ephemeral=True)
                return

        self.team_names = random.sample(teams_data, num_teams)

        team_embed = discord.Embed(title="Teams", description="Here are the randomly assigned teams:")
        for i, team in enumerate(teams):
            team_name, emote = self.team_names[i]
            team_embed.add_field(name=f"{team_name} {emote}", value="\n".join(team), inline=False)

        await interaction.response.send_message(embed=team_embed, view=TeamSelectView(self.bot, mode=self.mode, num_teams=num_teams))

    async def reshuffle_teams(self, interaction: discord.Interaction, num_teams: int):
        global teams
        max_team_size = 6 if self.mode == 'Full Court' else 4
        teams = [initial_queue[i::num_teams] for i in range(num_teams)]
        for team in teams:
            if len(team) > max_team_size:
                await interaction.response.send_message(f"Cannot form teams. Too many players for {self.mode}.", ephemeral=True)
                return

        self.team_names = random.sample(teams_data, num_teams)

        team_embed = discord.Embed(title="Teams", description="Teams reshuffled:")
        for i, team in enumerate(teams):
            team_name, emote = self.team_names[i]
            team_embed.add_field(name=f"{team_name} {emote}", value="\n".join(team), inline=False)

        await interaction.response.send_message(embed=team_embed, view=TeamSelectView(self.bot, mode=self.mode, num_teams=num_teams))

    async def matchmake(self, interaction: discord.Interaction):
        if not teams or len(teams) < 2:
            await interaction.response.send_message("Not enough teams to matchmake.", ephemeral=True)
            return

        random.shuffle(teams)
        matchups = [(teams[i], teams[i+1]) for i in range(0, len(teams)-1, 2)]
        if len(teams) % 2 == 1:
            matchups.append((teams[-1], None))

        match_embed = discord.Embed(title="Matchups", description="Here are the matchups:")
        for i, (team1, team2) in enumerate(matchups):
            team1_name, team1_emote = self.team_names[i]
            team2_name, team2_emote = self.team_names[i+1] if team2 else ("No opponent", "")
            match_embed.add_field(name=f"Match {i+1}", value=f"{team1_name} {team1_emote} vs {team2_name} {team2_emote}", inline=False)

        await interaction.response.send_message(embed=match_embed)

    async def toggle_mode(self, interaction: discord.Interaction):
        self.mode = 'Short Court' if self.mode == 'Full Court' else 'Full Court'
        await interaction.response.send_message(f"Mode changed to {self.mode}.", ephemeral=True)
        await self.start_queue(interaction)

    async def add_bots(self, interaction: discord.Interaction):
        for i in range(1, 12):
            bot_name = f"Bot {i}"
            if bot_name not in queue:
                queue.append(bot_name)
        await self.update_queue_message()
        await interaction.response.send_message("Added 11 bots to the queue.", ephemeral=True)

@bot.event
async def on_ready():
    print(f'Logged in as {bot.user}')
    try:
        synced = await bot.tree.sync()
        print(f'Synced {len(synced)} commands')
    except Exception as e:
        print(f'Error syncing commands: {e}')

@bot.event
async def on_interaction(interaction: discord.Interaction):
    if interaction.type == discord.InteractionType.component:
        cog = bot.get_cog("MyBot")
        if interaction.data["custom_id"] == "join_queue":
            if interaction.user.display_name not in queue:
                queue.append(interaction.user.display_name)
                await cog.update_queue_message()
                await interaction.response.send_message(f"{interaction.user.display_name} has joined the queue!", ephemeral=True)
            else:
                await interaction.response.send_message("You are already in the queue.", ephemeral=True)
        elif interaction.data["custom_id"] == "leave_queue":
            if interaction.user.display_name in queue:
                queue.remove(interaction.user.display_name)
                await cog.update_queue_message()
                await interaction.response.send_message(f"{interaction.user.display_name} has left the queue!", ephemeral=True)
            else:
                await interaction.response.send_message("You are not in the queue.", ephemeral=True)
        elif interaction.data["custom_id"] == "add_bots":
            await cog.add_bots(interaction)
        elif interaction.data["custom_id"] == "start_queue":
            await cog.start_queue(interaction)
        elif interaction.data["custom_id"].startswith("teams_"):
            num_teams = int(interaction.data["custom_id"].split("_")[1])
            await cog.handle_team_selection(interaction, num_teams)
        elif interaction.data["custom_id"].startswith("reshuffle_"):
            num_teams = int(interaction.data["custom_id"].split("_")[1])
            await cog.reshuffle_teams(interaction, num_teams)
        elif interaction.data["custom_id"] == "toggle_mode":
            await cog.toggle_mode(interaction)
        elif interaction.data["custom_id"] == "matchmake":
            await cog.matchmake(interaction)

async def main():
    async with bot:
        await bot.add_cog(MyBot(bot))
        await bot.start('Bot Token Placeholder')
        
import asyncio
asyncio.run(main())
